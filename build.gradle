import java.util.regex.Matcher
import java.util.regex.Pattern

project.ext.set('versionName', '0.5-SNAPSHOT')
project.ext.set('versionCode', 5)

project.ext.set('archivesBaseName', "BalanduinoAndroidApp-" + project.versionName)

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.+'
    }
}

task wrapper(type: org.gradle.api.tasks.wrapper.Wrapper) {
    gradleVersion = '1.6'
}

task filter(type: Copy) {
    println "Updating accessory filter version to: " + project.versionName
    delete('res/xml/accessory_filter.xml') // Delete old file
    from 'src/templates'
    into 'res/xml'
    expand(version: project.versionName) // Substitute version in accessory_filter.xml
}

task update {
    def manifestFile = file("AndroidManifest.xml")
    def manifestText = manifestFile.getText()

    println "Updating AndroidManifest versionName to: " + project.versionName
    def matcherVersionName = Pattern.compile("android:versionName=\"(.*?)\"").matcher(manifestText)
    manifestText = matcherVersionName.replaceAll("android:versionName=\"" + project.versionName + "\"")

    println "Updating AndroidManifest versionCode to: " + project.versionCode
    def matcherVersionCode = Pattern.compile("android:versionCode=\"(.*?)\"").matcher(manifestText)
    manifestText = matcherVersionCode.replaceAll("android:versionCode=\"" + project.versionCode + "\"")
    
    manifestFile.write(manifestText)
}
update.dependsOn filter

apply plugin: 'android'

repositories {
    mavenCentral()
    maven {
        url 'https://github.com/skyisle/abs-aar/raw/master'
    }
    maven {
        url 'https://github.com/dahlgren/vpi-aar/raw/master'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(':libs:GraphView')
    compile 'com.actionbarsherlock:actionbarsherlock:4.3.2-SNAPSHOT'
    compile 'com.viewpagerindicator:library:2.4.2-SNAPSHOT'
}

android {
    compileSdkVersion 17
    buildToolsVersion '17.0.0'

    defaultConfig {
        versionName = project.versionName
        versionCode = project.versionCode
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {            
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        instrumentTest.setRoot('tests')
    }
}

// These values are all set in my global gradle.properties file
if (project.hasProperty('storeFile') && project.hasProperty('storePassword') && project.hasProperty('keyAlias') && project.hasProperty('keyPassword')) {
    android.signingConfigs.release.storeFile = file(storeFile)
    android.signingConfigs.release.storePassword = storePassword
    android.signingConfigs.release.keyAlias = keyAlias
    android.signingConfigs.release.keyPassword = keyPassword
} else {
    android.buildTypes.release.signingConfig = null
}

// Releasing:
// 1. Update versionName and versionCode
// 2. Run 'gradle clean update build'
// 3. Move APK to releases directory
// 4. Upload to Github and create tag
// 5. Upload to Google Play Store
//    * Also take new screenshots if necessary